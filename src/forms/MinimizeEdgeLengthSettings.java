/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2014-2019 Bruno Augusto Nassif Travencolo.
 * All Rights Reserved.
 *
 * This file is part of DyNetVis Project (DyNetVis).
 *
 * How to cite this software:
 *  
@inproceedings{Linhares:2017:DSV:3019612.3019686,
 author = {Linhares, Claudio D. G. and Traven\c{c}olo, Bruno A. N. and Paiva, Jose Gustavo S. and Rocha, Luis E. C.},
 title = {DyNetVis: A System for Visualization of Dynamic Networks},
 booktitle = {Proceedings of the Symposium on Applied Computing},
 series = {SAC '17},
 year = {2017},
 isbn = {978-1-4503-4486-9},
 location = {Marrakech, Morocco},
 pages = {187--194},
 numpages = {8},
 url = {http://doi.acm.org/10.1145/3019612.3019686},
 doi = {10.1145/3019612.3019686},
 acmid = {3019686},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {complex networks, dynamic graph visualization, dynamic networks, recurrent neighbors, temporal activity map},
} 
 *  
 * DyNetVis is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 *
 * DyNetVis is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * This code was developed by members of Lab of Complex Network Visualization at 
 * Federal University of Uberlândia, Brazil - (https://sites.google.com/view/dynetvis/team?authuser=0). 
 * The initial developer of the original code is Claudio D. G. Linhares <claudiodgl@gmail.com>.
 *
 * Contributor(s): Jean R. Ponciano -- jeanrobertop@gmail.com, Luis E. C. Rocha -- luis.rocha@ugent.be, 
 * José Gustavo S. Paiva -- gustavo@ufu.br, Bruno A. N. Travençolo -- travencolo@gmail.com
 *
 * You should have received a copy of the GNU General Public License along 
 * with DyNetVis. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */

package forms;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import javax.swing.BorderFactory;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.border.Border;


/**
 *
 * @author Claudio Linhares
 */
public class MinimizeEdgeLengthSettings extends JDialog {
    
    public JDialog  f;
    public JProgressBar progressBar;
    
    public MinimizeEdgeLengthSettings(MainForm t) {
        
        super(t);
            
        initComponents();
        this.setModal(true);
        this.frame = t;
        
        f = new JDialog();
        f.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        Container content = f.getContentPane();
        
        this.f.getRootPane().setOpaque(false);
        this.f.getContentPane().setBackground(t.strong);
        this.f.setBackground(t.strong);
        
        progressBar = new JProgressBar();
        progressBar.setValue(0);
        progressBar.setStringPainted(true);
        Border border = BorderFactory.createTitledBorder("Reading...");
        progressBar.setBorder(border);
        content.add(progressBar, BorderLayout.NORTH);
        f.setSize(300, 100);
        f.setModal(true);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        f.setResizable(false);
        f.setLocationRelativeTo(this);
        f.setVisible(false);
        
    }
    
    public String text, urlFile;

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        sourcePanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        intialTemperatureTextBox = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        collingRateTextBox = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        StandardDeviationCheckBox = new javax.swing.JCheckBox();
        openFileCheckBox = new javax.swing.JCheckBox();
        saveFileCheckBox = new javax.swing.JCheckBox();
        sourcePanel = new javax.swing.JPanel();
        selectLabel = new javax.swing.JLabel();
        directoryTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        OKButton1 = new javax.swing.JButton();
        cancelButton1 = new javax.swing.JButton();

        setMaximumSize(null);
        setPreferredSize(new java.awt.Dimension(500, 300));
        setResizable(false);
        setSize(new java.awt.Dimension(500, 390));
        getContentPane().setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 10));

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel7.setText("Minimize Edge Length Settings");
        jLabel7.setToolTipText("");
        jLabel7.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        getContentPane().add(jLabel7);

        sourcePanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        sourcePanel1.setPreferredSize(new java.awt.Dimension(450, 100));
        sourcePanel1.setLayout(new java.awt.GridLayout(4, 2));

        jLabel1.setText("Simulated Annealing Parameters:");
        sourcePanel1.add(jLabel1);
        sourcePanel1.add(jLabel4);

        jLabel2.setText("Initial Temperature:");
        sourcePanel1.add(jLabel2);

        intialTemperatureTextBox.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        intialTemperatureTextBox.setText("100");
        sourcePanel1.add(intialTemperatureTextBox);

        jLabel3.setText("Cooling Rate:");
        sourcePanel1.add(jLabel3);

        collingRateTextBox.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        collingRateTextBox.setText("0.01");
        sourcePanel1.add(collingRateTextBox);

        jLabel5.setText("Edges Length Restriction:");
        sourcePanel1.add(jLabel5);

        StandardDeviationCheckBox.setText("Standard Deviation");
        StandardDeviationCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        StandardDeviationCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StandardDeviationCheckBoxActionPerformed(evt);
            }
        });
        sourcePanel1.add(StandardDeviationCheckBox);

        getContentPane().add(sourcePanel1);

        openFileCheckBox.setText("Open File");
        openFileCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileCheckBoxActionPerformed(evt);
            }
        });
        getContentPane().add(openFileCheckBox);

        saveFileCheckBox.setText("Save File");
        saveFileCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileCheckBoxActionPerformed(evt);
            }
        });
        getContentPane().add(saveFileCheckBox);

        sourcePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        sourcePanel.setPreferredSize(new java.awt.Dimension(450, 40));

        selectLabel.setText("Select:");
        selectLabel.setEnabled(false);
        sourcePanel.add(selectLabel);

        directoryTextField.setEnabled(false);
        directoryTextField.setPreferredSize(new java.awt.Dimension(280, 20));
        sourcePanel.add(directoryTextField);

        searchButton.setText("Search...");
        searchButton.setEnabled(false);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        sourcePanel.add(searchButton);

        getContentPane().add(sourcePanel);

        OKButton1.setText("OK");
        OKButton1.setMaximumSize(new java.awt.Dimension(65, 23));
        OKButton1.setMinimumSize(new java.awt.Dimension(65, 23));
        OKButton1.setPreferredSize(new java.awt.Dimension(65, 23));
        OKButton1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        OKButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(OKButton1);

        cancelButton1.setText("Cancel");
        cancelButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(cancelButton1);
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        
        JFileChooser openDialog = new JFileChooser();
        String filename = "";
        
        
        openDialog.resetChoosableFileFilters();
        openDialog.setAcceptAllFileFilterUsed(false);
        //openDialog.setFileFilter(new DATFilter());
        openDialog.setMultiSelectionEnabled(false);
        if(openFileCheckBox.isSelected())
        {
            openDialog.setDialogTitle("Open file");
            openDialog.setSelectedFile(new File(filename));
            if(this.lastPath != null){
                filename = this.lastPath;
            }
            openDialog.setCurrentDirectory(new File(filename));
            int result = openDialog.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                filename = openDialog.getSelectedFile().getAbsolutePath();
                urlFile = filename;
                this.lastPath = openDialog.getSelectedFile().getParent();
                this.getPointsTextField().setText(filename);
                openDialog.setSelectedFile(new File(""));
            }
        }
        else if(saveFileCheckBox.isSelected())
        {
            openDialog.setDialogTitle("Select Directory");
            openDialog.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            if(this.lastPath != null){
                filename = this.lastPath;
            }
            openDialog.setCurrentDirectory(new File(filename));
            int result = openDialog.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                filename = openDialog.getSelectedFile().getAbsolutePath();
                urlFile = filename;
                this.lastPath = openDialog.getSelectedFile().getParent();
                
                this.getPointsTextField().setText(filename);
                openDialog.setSelectedFile(new File(""));
            }
        }
        else
        {
            this.lastPath = null;
        }
        
        
        
       
        
    }//GEN-LAST:event_searchButtonActionPerformed

    private void OKButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButton1ActionPerformed
          						
        if(openFileCheckBox.isSelected() || saveFileCheckBox.isSelected())
        {
            if(getPointsTextField().getText().trim().length() == 0)
            {
              JOptionPane.showMessageDialog(null, "A file/directory must be selected.", "Error", 0);
              return;
            }
            
        }
        
        if(intialTemperatureTextBox.getText().trim().length() == 0)
        {
          JOptionPane.showMessageDialog(null, "A number of Initial Temperature must by typed.", "Error", 0);
          return;
        }
        
        if(collingRateTextBox.getText().trim().length() == 0)
        {
          JOptionPane.showMessageDialog(null, "A number of Colling Rate must by typed.", "Error", 0);
          return;
        }
            
        frame.getNetInline().stdDeviation = StandardDeviationCheckBox.isSelected();
        

        frame.getNetInline().coolingRate = Double.parseDouble(collingRateTextBox.getText());
        frame.getNetInline().initialTemp = Double.parseDouble(intialTemperatureTextBox.getText());

        
        
        if(saveFileCheckBox.isSelected())
        {
            frame.getNetInline().imprimirTxtEdgeLength = true;
            frame.getNetInline().txtEdgeLength = getPointsTextField().getText() + "//EdgeLength_"+(StandardDeviationCheckBox.isSelected() ? "Std_" : "")+frame.nameFile+"_Res"+frame.numberNetworkResolution+".txt";
            if(new File(frame.getNetInline().txtEdgeLength).exists())
            {
                JOptionPane.showMessageDialog(null, "This file already exists.", "Error", 0);
                return;
            }
        }
        else
            frame.getNetInline().imprimirTxtEdgeLength = false;

        if(openFileCheckBox.isSelected())
        {
            frame.getNetInline().openFileEdgeLength = true;
            frame.getNetInline().pathFileEdgeLength = getPointsTextField().getText();
        }

        frame.getNetInline().orderNodesInline("Minimize Edge Length", frame.getNetLayout().graphComponent);
        //frame.setEdgeTemporalStatistic();

        f.setVisible(false);
        dispose();



    }//GEN-LAST:event_OKButton1ActionPerformed

    
    private void cancelButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButton1ActionPerformed
        setVisible(false);
    }//GEN-LAST:event_cancelButton1ActionPerformed

    private void openFileCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileCheckBoxActionPerformed
        saveFileCheckBox.setSelected(false);
        directoryTextField.setText("");
        if(openFileCheckBox.isSelected())
        {
            selectLabel.setEnabled(true);
            directoryTextField.setEnabled(true);
            searchButton.setEnabled(true);
        }
        else
        {
            selectLabel.setEnabled(false);
            directoryTextField.setEnabled(false);
            searchButton.setEnabled(false);
        }
    }//GEN-LAST:event_openFileCheckBoxActionPerformed

    private void saveFileCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileCheckBoxActionPerformed
        openFileCheckBox.setSelected(false);
        directoryTextField.setText("");
        if(saveFileCheckBox.isSelected())
        {
            selectLabel.setEnabled(true);
            directoryTextField.setEnabled(true);
            searchButton.setEnabled(true);
        }
        else
        {
            selectLabel.setEnabled(false);
            directoryTextField.setEnabled(false);
            searchButton.setEnabled(false);
        }
    }//GEN-LAST:event_saveFileCheckBoxActionPerformed

    private void StandardDeviationCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StandardDeviationCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_StandardDeviationCheckBoxActionPerformed
    
    public static MinimizeEdgeLengthSettings getInstance(MainForm t) {
        if (instance == null || instance.getParent() != t) {
            instance = new MinimizeEdgeLengthSettings(t);
            
        }
        return instance;
    }

    public void display() {
        this.pack();
        this.setLocationRelativeTo(this.getParent());
        this.setVisible(true);
    }

    private static MinimizeEdgeLengthSettings instance;
    private MainForm frame;
    public String lastPath;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton OKButton1;
    private javax.swing.JCheckBox StandardDeviationCheckBox;
    public javax.swing.JButton cancelButton1;
    private javax.swing.JTextField collingRateTextBox;
    public javax.swing.JTextField directoryTextField;
    private javax.swing.JTextField intialTemperatureTextBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JCheckBox openFileCheckBox;
    private javax.swing.JCheckBox saveFileCheckBox;
    public javax.swing.JButton searchButton;
    private javax.swing.JLabel selectLabel;
    public javax.swing.JPanel sourcePanel;
    public javax.swing.JPanel sourcePanel1;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the pointsTextField
     */
    public javax.swing.JTextField getPointsTextField() {
        return directoryTextField;
    }

}
