/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2014-2019 Bruno Augusto Nassif Travencolo.
 * All Rights Reserved.
 *
 * This file is part of DyNetVis Project (DyNetVis).
 *
 * How to cite this software:
 *  
@inproceedings{Linhares:2017:DSV:3019612.3019686,
 author = {Linhares, Claudio D. G. and Traven\c{c}olo, Bruno A. N. and Paiva, Jose Gustavo S. and Rocha, Luis E. C.},
 title = {DyNetVis: A System for Visualization of Dynamic Networks},
 booktitle = {Proceedings of the Symposium on Applied Computing},
 series = {SAC '17},
 year = {2017},
 isbn = {978-1-4503-4486-9},
 location = {Marrakech, Morocco},
 pages = {187--194},
 numpages = {8},
 url = {http://doi.acm.org/10.1145/3019612.3019686},
 doi = {10.1145/3019612.3019686},
 acmid = {3019686},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {complex networks, dynamic graph visualization, dynamic networks, recurrent neighbors, temporal activity map},
} 
 *  
 * DyNetVis is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 *
 * DyNetVis is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * This code was developed by members of Lab of Complex Network Visualization at 
 * Federal University of Uberlândia, Brazil - (https://sites.google.com/view/dynetvis/team?authuser=0). 
 * The initial developer of the original code is Claudio D. G. Linhares <claudiodgl@gmail.com>.
 *
 * Contributor(s): Jean R. Ponciano -- jeanrobertop@gmail.com, Luis E. C. Rocha -- luis.rocha@ugent.be, 
 * José Gustavo S. Paiva -- gustavo@ufu.br, Bruno A. N. Travençolo -- travencolo@gmail.com
 *
 * You should have received a copy of the GNU General Public License along 
 * with DyNetVis. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */

package forms;

import javax.swing.JDialog;
import randomNetworks.TemporalBarabasiAlbertModel;

/**
 *
 * @author  Claudio Linhares
 */
public class GenerateBarabasiAlbertModel extends JDialog {

    public GenerateBarabasiAlbertModel(OpenDataSetDialog f) {
        initComponents();
        frame = f;
        setModal(true);
        setAlwaysOnTop(true);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        randomWalkerPanel = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        qtdNosBarabasi = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        nodeDegreeBarabasi = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        multiple_nodes_Barabasi = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        runRandomWalker = new javax.swing.JButton();

        setTitle("Generate Barabási-Albert model");
        setAlwaysOnTop(true);
        setLocationByPlatform(true);
        setResizable(false);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        randomWalkerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        randomWalkerPanel.setToolTipText("");
        randomWalkerPanel.setMaximumSize(null);
        randomWalkerPanel.setName(""); // NOI18N
        randomWalkerPanel.setLayout(new java.awt.GridLayout(4, 0));

        jLabel17.setText("Desired Number of Nodes");
        randomWalkerPanel.add(jLabel17);

        qtdNosBarabasi.setText("1000");
        qtdNosBarabasi.setToolTipText("");
        qtdNosBarabasi.setPreferredSize(new java.awt.Dimension(40, 20));
        qtdNosBarabasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtdNosBarabasiActionPerformed(evt);
            }
        });
        randomWalkerPanel.add(qtdNosBarabasi);

        jLabel18.setText("Node Degree");
        randomWalkerPanel.add(jLabel18);

        nodeDegreeBarabasi.setText("3");
        nodeDegreeBarabasi.setToolTipText("");
        nodeDegreeBarabasi.setPreferredSize(new java.awt.Dimension(40, 20));
        nodeDegreeBarabasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodeDegreeBarabasiActionPerformed(evt);
            }
        });
        randomWalkerPanel.add(nodeDegreeBarabasi);

        jLabel19.setText("Number of Nodes per Timestamp");
        randomWalkerPanel.add(jLabel19);

        multiple_nodes_Barabasi.setText("1");
        multiple_nodes_Barabasi.setToolTipText("");
        multiple_nodes_Barabasi.setPreferredSize(new java.awt.Dimension(40, 20));
        multiple_nodes_Barabasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiple_nodes_BarabasiActionPerformed(evt);
            }
        });
        randomWalkerPanel.add(multiple_nodes_Barabasi);

        jLabel1.setText(" ");
        randomWalkerPanel.add(jLabel1);

        runRandomWalker.setText("Create Network");
        runRandomWalker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runRandomWalkerActionPerformed(evt);
            }
        });
        randomWalkerPanel.add(runRandomWalker);

        getContentPane().add(randomWalkerPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void runRandomWalkerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runRandomWalkerActionPerformed
       frame.t = new TemporalBarabasiAlbertModel(Integer.parseInt(qtdNosBarabasi.getText()), Integer.parseInt(nodeDegreeBarabasi.getText()), Integer.parseInt(multiple_nodes_Barabasi.getText()));
       frame.executeRandomNetworkAlgorithm();
       this.setVisible(false);
    }//GEN-LAST:event_runRandomWalkerActionPerformed

    private void qtdNosBarabasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtdNosBarabasiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_qtdNosBarabasiActionPerformed

    private void nodeDegreeBarabasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodeDegreeBarabasiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nodeDegreeBarabasiActionPerformed

    private void multiple_nodes_BarabasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiple_nodes_BarabasiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_multiple_nodes_BarabasiActionPerformed

    
    public void display() {
        this.pack();
        this.setLocation(frame.getWidth()/2 + this.getWidth()/2, frame.getHeight()/2 - this.getHeight()/2);
        this.setVisible(true);
    }
    
    private OpenDataSetDialog frame;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JTextField multiple_nodes_Barabasi;
    private javax.swing.JTextField nodeDegreeBarabasi;
    private javax.swing.JTextField qtdNosBarabasi;
    private javax.swing.JPanel randomWalkerPanel;
    private javax.swing.JButton runRandomWalker;
    // End of variables declaration//GEN-END:variables

}