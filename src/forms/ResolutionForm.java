/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2014-2019 Bruno Augusto Nassif Travencolo.
 * All Rights Reserved.
 *
 * This file is part of DyNetVis Project (DyNetVis).
 *
 * How to cite this software:
 *  
@inproceedings{Linhares:2017:DSV:3019612.3019686,
 author = {Linhares, Claudio D. G. and Traven\c{c}olo, Bruno A. N. and Paiva, Jose Gustavo S. and Rocha, Luis E. C.},
 title = {DyNetVis: A System for Visualization of Dynamic Networks},
 booktitle = {Proceedings of the Symposium on Applied Computing},
 series = {SAC '17},
 year = {2017},
 isbn = {978-1-4503-4486-9},
 location = {Marrakech, Morocco},
 pages = {187--194},
 numpages = {8},
 url = {http://doi.acm.org/10.1145/3019612.3019686},
 doi = {10.1145/3019612.3019686},
 acmid = {3019686},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {complex networks, dynamic graph visualization, dynamic networks, recurrent neighbors, temporal activity map},
} 
 *  
 * DyNetVis is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 *
 * DyNetVis is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * This code was developed by members of Lab of Complex Network Visualization at 
 * Federal University of Uberlândia, Brazil - (https://sites.google.com/view/dynetvis/team?authuser=0). 
 * The initial developer of the original code is Claudio D. G. Linhares <claudiodgl@gmail.com>.
 *
 * Contributor(s): Jean R. Ponciano -- jeanrobertop@gmail.com, Luis E. C. Rocha -- luis.rocha@ugent.be, 
 * José Gustavo S. Paiva -- gustavo@ufu.br, Bruno A. N. Travençolo -- travencolo@gmail.com
 *
 * You should have received a copy of the GNU General Public License along 
 * with DyNetVis. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */

package forms;

import javax.swing.JDialog;


/**
 *
 * @author Claudio Linhares
 */
public class ResolutionForm extends JDialog {
    
    public ResolutionForm(MainForm t,int min, int max, String res, int minSelected, int maxSelected) {
        super(t);
        initComponents();
        
        this.minimumTime.setMaximum(max);
        this.minimumTime.setMinimum(min);
        this.minimumTime.setValue(minSelected);
        jTextField1.setText(minSelected+"");
        this.maximumTime.setMaximum(max);
        this.maximumTime.setMinimum(min);
        this.maximumTime.setValue(maxSelected);
        jTextField2.setText(maxSelected+"");
        this.resolutionSpinner.setValue(Integer.parseInt(res));
        
        this.setModal(false);
        this.frame = t;
    }
    
    public String text, urlFile;

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        minimumTime = new javax.swing.JSlider();
        jPanel3 = new javax.swing.JPanel();
        jTextField2 = new javax.swing.JTextField();
        maximumTime = new javax.swing.JSlider();
        resolutionPanel = new javax.swing.JPanel();
        resolutionSpinner = new javax.swing.JSpinner();
        buttonPanel1 = new javax.swing.JPanel();
        convertTime = new javax.swing.JCheckBox();
        OKButton1 = new javax.swing.JButton();
        cancelButton1 = new javax.swing.JButton();

        setAutoRequestFocus(false);
        setResizable(false);
        getContentPane().setLayout(new java.awt.FlowLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Minimum Time"));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jTextField1.setText("                   ");
        jTextField1.setMinimumSize(new java.awt.Dimension(10, 20));
        jTextField1.setPreferredSize(new java.awt.Dimension(100, 20));
        jPanel1.add(jTextField1, new java.awt.GridBagConstraints());

        minimumTime.setMaximum(1000);
        minimumTime.setValue(0);
        minimumTime.setPreferredSize(new java.awt.Dimension(350, 50));
        minimumTime.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minimumTimeStateChanged(evt);
            }
        });
        jPanel1.add(minimumTime, new java.awt.GridBagConstraints());

        getContentPane().add(jPanel1);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Maximum Time"));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jTextField2.setText("                   ");
        jTextField2.setMinimumSize(new java.awt.Dimension(10, 20));
        jTextField2.setPreferredSize(new java.awt.Dimension(100, 20));
        jPanel3.add(jTextField2, new java.awt.GridBagConstraints());

        maximumTime.setMaximum(1000);
        maximumTime.setValue(100);
        maximumTime.setPreferredSize(new java.awt.Dimension(350, 45));
        maximumTime.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maximumTimeStateChanged(evt);
            }
        });
        jPanel3.add(maximumTime, new java.awt.GridBagConstraints());

        getContentPane().add(jPanel3);

        resolutionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Resolution File"));

        resolutionSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        resolutionSpinner.setMinimumSize(new java.awt.Dimension(60, 20));
        resolutionSpinner.setPreferredSize(new java.awt.Dimension(80, 20));
        resolutionSpinner.setValue(1);
        resolutionSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                resolutionSpinnerStateChanged(evt);
            }
        });
        resolutionPanel.add(resolutionSpinner);

        getContentPane().add(resolutionPanel);

        buttonPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        convertTime.setText("Subtract Minimum Time");
        buttonPanel1.add(convertTime);

        OKButton1.setText("OK");
        OKButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKButton1ActionPerformed(evt);
            }
        });
        buttonPanel1.add(OKButton1);

        cancelButton1.setText("Cancel");
        cancelButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButton1ActionPerformed(evt);
            }
        });
        buttonPanel1.add(cancelButton1);

        getContentPane().add(buttonPanel1);
    }// </editor-fold>//GEN-END:initComponents

    private void OKButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButton1ActionPerformed
     /* long tempoInicio = System.currentTimeMillis();
    NetLayout net = null;
    NetLayoutInlineNew netInline = new NetLayoutInlineNew();
    if (getPointsTextField().getText().trim().length() > 0)
    {
        
      int id = 0;
        ArrayList<ArrayList> matrizDataInline = new ArrayList<>();
        ArrayList<Integer> coluna = new ArrayList<>();
        BufferedReader file;
            
          try {
                file = new BufferedReader(new FileReader(new File(getPointsTextField().getText())));
                String line = file.readLine();
                String lastline = "";
                while((line = file.readLine()) != null) {
                    String[] tokens = line.split(" ");
                    coluna.add(Integer.parseInt(tokens[0]));
                    coluna.add(Integer.parseInt(tokens[1]));
                    
                    if((Integer.parseInt(tokens[2]) >= Integer.parseInt(jTextField1.getText())) && (Integer.parseInt(tokens[2]) <= Integer.parseInt(jTextField2.getText()))){
                        if(convertTime.isSelected())
                        {
                            int t = Integer.parseInt(tokens[2]) - Integer.parseInt(jTextField1.getText());
                            tokens[2] = t+"";
                        }
                        if(!resolutionSpinner.getValue().equals("1"))
                        {
                            int t = (int) Math.floor(Integer.parseInt(tokens[2]) / Integer.parseInt(resolutionSpinner.getValue().toString()));
                            tokens[2] = t + "";
                        }
                        String lineAtual = tokens[0]+" "+tokens[1]+" "+tokens[2];
                        if(!lastline.equals(lineAtual))
                        {
                            coluna.add(Integer.parseInt(tokens[2]));
                            matrizDataInline.add(id, coluna);
                            id++;
                            lastline = lineAtual;
                        }
                    }
                    coluna = new ArrayList<>();
                }
          } catch (FileNotFoundException ex) {
              Logger.getLogger(ResolutionForm.class.getName()).log(Level.SEVERE, null, ex);
          } catch (IOException ex) {
              Logger.getLogger(ResolutionForm.class.getName()).log(Level.SEVERE, null, ex);
          }
        
          
      this.frame.matrizData = new ArrayList();
      this.frame.matrizData.addAll(matrizDataInline);
        
      netInline.NetLayoutInlineNew(matrizDataInline, 1, 15);
      this.frame.setNetInline(netInline);
      this.frame.setNetLayoutInline(netInline.graphComponent, netInline.matrizDataInline);
      net = new NetLayout(getPointsTextField().getText(), netInline.matrizDataInline);
      this.frame.setTitle(getPointsTextField().getText());
      this.frame.setNetLayout(net);
      this.frame.setPathDataset(getPointsTextField().getText());
      this.frame.showHideButtons(true);
      this.frame.resetFlags();
      this.text = getPointsTextField().getText();
      
      setVisible(false);
      ColorForm cf = new ColorForm(this.frame);
      this.frame.setCf(cf);
      cf.display(this.frame);
      
      long milliseconds = System.currentTimeMillis() - tempoInicio;
      String minutos = String.format("%d min, %d sec", new Object[] { Long.valueOf(TimeUnit.MILLISECONDS.toMinutes(milliseconds)), Long.valueOf(TimeUnit.MILLISECONDS.toSeconds(milliseconds) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(milliseconds))) });
      System.out.println("Tempo Total para Carregar o Arquivo " + getPointsTextField().getText() + ": " + minutos);
    }
    else
    {
      JOptionPane.showMessageDialog(this, "A net data set file must be selected.", "Error", 0);
    }
        */
        
        /*
        int id = 0;
            matrizDataInline = new ArrayList<>();
            ArrayList<Integer> coluna = new ArrayList<>();
            deslocamento = 1;  
            shiftX = 30;
            
            while((line = file.readLine()) != null) {
                tokens = line.split(" ");
                coluna.add(Integer.parseInt(tokens[0]));
                coluna.add(Integer.parseInt(tokens[1]));
                coluna.add(Integer.parseInt(tokens[2]));
                matrizDataInline.add(id, coluna);
                coluna = new ArrayList<>();
                id++;
            }
        */
        
    }//GEN-LAST:event_OKButton1ActionPerformed

    private void cancelButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButton1ActionPerformed
        setVisible(false);
    }//GEN-LAST:event_cancelButton1ActionPerformed

    private void minimumTimeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minimumTimeStateChanged
        if(minimumTime.getValue() > maximumTime.getValue())
        {
            maximumTime.setValue(minimumTime.getValue());
        }
        jTextField1.setText(minimumTime.getValue()+"");
        
    }//GEN-LAST:event_minimumTimeStateChanged

    private void maximumTimeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maximumTimeStateChanged
        if(maximumTime.getValue() < minimumTime.getValue())
        {
            minimumTime.setValue(maximumTime.getValue());
        }
        jTextField2.setText(maximumTime.getValue()+"");
    }//GEN-LAST:event_maximumTimeStateChanged

    private void resolutionSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_resolutionSpinnerStateChanged

    }//GEN-LAST:event_resolutionSpinnerStateChanged
    
    public static ResolutionForm getInstance(MainForm t) {
        if (instance == null || instance.getParent() != t) {
            instance = new ResolutionForm(t,0,0,"",0,0);
        }
        return instance;
    }

    public void display() {
        this.pack();
        this.setLocationRelativeTo(this.getParent());
        this.setVisible(true);
    }

    private static ResolutionForm instance;
    private MainForm frame;
    private String pathLabelList;
    public String lastPath;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton OKButton1;
    private javax.swing.JPanel buttonPanel1;
    private javax.swing.JButton cancelButton1;
    private javax.swing.JCheckBox convertTime;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JSlider maximumTime;
    private javax.swing.JSlider minimumTime;
    private javax.swing.JPanel resolutionPanel;
    private javax.swing.JSpinner resolutionSpinner;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the pointsTextField
     */
   

}
